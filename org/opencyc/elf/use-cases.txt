Use Cases for the Behavior Engine

1. Emit a prompt and read the response from the console.
1. emit the prompt (actuator)
2. read the response (sensor)

BL (Behavior Language):

;; define the direct actions

(define-action OutputTextToConsole
  (:input-formal-parameters ((:name ?OUTPUT-TEXT :type String))
   :output-formal-parameters ())

(define-action CycApiRequest
  (:input-formal-parameters ((:name ?CYC_API_REQUEST :type CycList))
   :output-formal-parameters ((:name ?CYC_API_RESPONSE :type Object))))

;; define the direct sensations

(define-sensation ConsoleInput
  (:type String))

(define-sensation CycApiResponse
  (:type Object))

;; define the direct sensors

(define-direct-sensor ConsoleInput
  (:sensation ConsoleInput))

;; define the direct actuator-sensors

(define-direct-actuator-sensor CycApi
  (:command-capabilities (CycApiRequest)
   :sensation CycApiResponse))

;; define the direct actuators

(define-direct-actuator ConsoleOutput
  (:command-capabilities (ConsoleOutput)))

;; define the goals

(define-goal PerceiveSensation
  (:input-formal-parameters ((?PERCEIVED-SENSATION Object))
   :when (NotNull ?PERCEIVED-SENSATION)))

;; define the schedule sets

(define-schedule-set ConverseWithUser
  (:input-formal-parameters ((:name ?USER :type CycFort)))
  (:output-formal-parameters ((:name ?USER-INPUT :type String)))
  (:schedules
    (:predicate-expression null
     :commands
       (:perform ConsolePromptedInput :input-paramter-values (">"))
       (:achieve PerceiveSensation :input-parameter-values (?USER-INPUT)))))

(define-schedule-set GetCycImageId
  (:input-formal-parameters ((:name ?CYC-ACCESS :type CycAccess)))
  (:output-formal-parameters ((:name ?CYC-IMAGE-ID :type String)))
  (:schedules
    (:predicate-expression null
     :commands
       (:perform CycApiRequest 
        :input-parameter-values ("(cyc-image-id)")
        :output-state-variables (?CYC-IMAGE-ID)))))

    




