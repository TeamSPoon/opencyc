Use Cases for the Behavior Engine

1. Emit a prompt and read the response from the console.
1.1 emit the prompt (actuator)
1.2 read the response (sensor)

2. Get the Cyc image id from a given Cyc server.
2.1 make a new CycAccess object that communicates with the given hostname/port
2.2 assemble the api command (cyc-image-id)
2.3 perform the api request returning the cyc image id
2.4 close the CycAccess connection

CBL (Cyc Behavior Language):

;; define the direct actions

(define-action OutputTextToConsoleAction
  (:input-formal-parameters (:name ?OUTPUT-TEXT :type String)))

(define-action CycApiRequestAction
  (:input-formal-parameters (:name ?CYC_API_REQUEST :type CycList)
   :output-formal-parameters (:name ?CYC_API_RESPONSE :type Object)))

;; define the direct sensations

(define-sensation ConsoleInputSensation
  (:type String))

(define-sensation CycApiResponseSensation
  (:type Object))

;; define the direct sensors

(define-direct-sensor ConsoleInputSensor
  (:sensation ConsoleInput))

;; define the direct actuator-sensors

(define-direct-actuator-sensor CycApiActuatorSensor
  (:command-capabilities (CycApiRequestAction)
   :resources (:host-port "crapgame.cyc.com:3660")
   :sensation CycApiResponseSensation))

;; define the direct actuators

(define-direct-actuator ConsoleOutputActuator
  (:command-capabilities ConsoleOutputAction))

;; define the goals

(define-goal PerceiveSensationGoal
  (:input-formal-parameters (:name ?PERCEIVED-SENSATION :type Object)
   :when (NotNull ?PERCEIVED-SENSATION)))

;; define the jobs

(define-job ConsolePromptedInputJob
  (:direct-sensor ConsoleInputSensor
   :direct-actuator ConsoleOutputActuator))

;; define the job sets

(define-job-set ConverseWithUserJobSet
  (:job-set ConsolePromptedInputJob))

;; define the schedule sets

(define-schedule-set ConverseWithUser
  (:input-formal-parameters (:name ?USER :type CycFort))
  (:output-formal-parameters (:name ?USER-INPUT :type String))
  (:schedules
    (:default
     :commands
       (:perform ConsolePromptedInput :input-parameter-values (">"))
       (:achieve PerceiveSensation :input-parameter-values (?USER-INPUT)))
     :perceptions 
       (:sense ConsoleInput (:sensation ConsoleInput :output-state-variable (?USER-INPUT)))))

(define-schedule-set GetCycImageId
  (:input-formal-parameters ((:name ?CYC-ACCESS :type CycAccess)))
  (:output-formal-parameters ((:name ?CYC-IMAGE-ID :type String)))
  (:schedules
    (:default
     :commands
       (:assign ?COMMAND (TheEmptyList))
       (:assign ?COMMAND (JoinLists ?COMMAND (TheList (new CycSymbol "cyc-image-id")))) 
       (:perform CycApiRequest 
        :input-parameter-values (?CycAccess ?COMMAND)
        :output-state-variables (?CYC-IMAGE-ID)
        :resources ((((CycAccess) ?CycAccess).getHostnamePort)))
       (:call (((CycAccess) ?CycAccess).close)))))





