// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.opencyc.jini.shared;

public final class ServerLandlord_Stub
    extends java.rmi.server.RemoteStub
    implements com.sun.jini.lease.landlord.Landlord, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_cancel_0;
    private static java.lang.reflect.Method $method_cancelAll_1;
    private static java.lang.reflect.Method $method_renew_2;
    private static java.lang.reflect.Method $method_renewAll_3;
    
    static {
	try {
	    $method_cancel_0 = com.sun.jini.lease.landlord.Landlord.class.getMethod("cancel", new java.lang.Class[] {java.lang.Object.class});
	    $method_cancelAll_1 = com.sun.jini.lease.landlord.Landlord.class.getMethod("cancelAll", new java.lang.Class[] {java.lang.Object[].class});
	    $method_renew_2 = com.sun.jini.lease.landlord.Landlord.class.getMethod("renew", new java.lang.Class[] {java.lang.Object.class, long.class});
	    $method_renewAll_3 = com.sun.jini.lease.landlord.Landlord.class.getMethod("renewAll", new java.lang.Class[] {java.lang.Object[].class, long[].class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public ServerLandlord_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of cancel(Object)
    public void cancel(java.lang.Object $param_Object_1)
	throws java.rmi.RemoteException, net.jini.core.lease.UnknownLeaseException
    {
	try {
	    ref.invoke(this, $method_cancel_0, new java.lang.Object[] {$param_Object_1}, -7019438009129597702L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (net.jini.core.lease.UnknownLeaseException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of cancelAll(Object[])
    public java.util.Map cancelAll(java.lang.Object[] $param_arrayOf_Object_1)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_cancelAll_1, new java.lang.Object[] {$param_arrayOf_Object_1}, 8599820510354594243L);
	    return ((java.util.Map) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of renew(Object, long)
    public long renew(java.lang.Object $param_Object_1, long $param_long_2)
	throws java.rmi.RemoteException, net.jini.core.lease.LeaseDeniedException, net.jini.core.lease.UnknownLeaseException
    {
	try {
	    Object $result = ref.invoke(this, $method_renew_2, new java.lang.Object[] {$param_Object_1, new java.lang.Long($param_long_2)}, 6383706010821042857L);
	    return ((java.lang.Long) $result).longValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (net.jini.core.lease.LeaseDeniedException e) {
	    throw e;
	} catch (net.jini.core.lease.UnknownLeaseException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of renewAll(Object[], long[])
    public com.sun.jini.lease.landlord.Landlord.RenewResults renewAll(java.lang.Object[] $param_arrayOf_Object_1, long[] $param_arrayOf_long_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_renewAll_3, new java.lang.Object[] {$param_arrayOf_Object_1, $param_arrayOf_long_2}, -6123150850103711266L);
	    return ((com.sun.jini.lease.landlord.Landlord.RenewResults) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
