Use Cases for the Behavior Engine

1. Emit a prompt and read the response from the console.
1. emit the prompt (actuator)
2. read the response (sensor)

BL (Behavior Language):

;; define the direct actions

(define-action OutputTextToConsole
  (:input-formal-parameters ((?OUTPUT-TEXT String))
   :output-formal-parameters ()
   :actuator ConsoleOutput))

;; define the direct sensations

(define-sensation ConsoleInput



;; define the direct sensors

(define-direct-sensor ConsoleInput
  (:sensation ConsoleInput))

;; define the actuator-sensors

(define-actuator-sensor CycApi
  (:command-capabilities (CycApiRequest)
   :sensation CycApiResponse))




(define-goal PerceiveSensation
  (:input-formal-parameters ((?PERCEIVED-SENSATION Object))
   :when (NotNull ?PERCEIVED-SENSATION)))

;; define the schedule sets

(define-schedule-set 

;; 
(define-action ConverseWithUser
  (:name "ConverseWithUser"
   :input-formal-parameters ((?USER CycFort))
   :output-formal-parameters ((?USER-INPUT String))
   :sensor
  (perform ConsolePromptedInput 
    (:input-parameter-values (">"))
  (achieve PerceiveSensation
    (:input-parameter-values (?USER-INPUT)))
    


define ConverseWithUser
  [command name: "ConverseWithUser"
   input formal parameters: ?USER
   output formal parameters: "?USER-INPUT" (String)
   output state variables: "?USER-INPUT"]
  
  perform ConsolePromptedInput using ">" as ?PROMPT
    [command name: "ConsolePromptedInput"
     input formal parameters: ?PROMPT (String)]
     
  achieve PerceiveSensation using ?USER-INPUT as ?PERCEIVED-SENSATION
    [command name: "PerceiveSensation"
     input formal parameters: ?PERCEIVED-SENSATION (Object)
     predicate expression: (not-null ?PERCEIVED-SENSATION)]


The Schedule for ConverseWithUser

(ConverseWithUser using SteveReed as ?User perceiving ?CONSOLE-INPUT as ?USER-INPUT)
  (ConsolePromptedInput using ">")
  (PerceiveSensation when (not-null ?CONSOLE-INPUT))



